// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: chat/chat.proto

package chat

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RChatClient is the client API for RChat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RChatClient interface {
	Signup(ctx context.Context, in *Credentials, opts ...grpc.CallOption) (*AuthResponse, error)
	Login(ctx context.Context, in *Credentials, opts ...grpc.CallOption) (*AuthResponse, error)
	Whoami(ctx context.Context, in *WhoamiRequest, opts ...grpc.CallOption) (*User, error)
	Open(ctx context.Context, opts ...grpc.CallOption) (RChat_OpenClient, error)
	FindSpaces(ctx context.Context, in *FindSpacesRequest, opts ...grpc.CallOption) (*FindSpacesResponse, error)
	FindUsers(ctx context.Context, in *FindUsersRequest, opts ...grpc.CallOption) (*FindUsersResponse, error)
}

type rChatClient struct {
	cc grpc.ClientConnInterface
}

func NewRChatClient(cc grpc.ClientConnInterface) RChatClient {
	return &rChatClient{cc}
}

func (c *rChatClient) Signup(ctx context.Context, in *Credentials, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, "/chat.RChat/Signup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rChatClient) Login(ctx context.Context, in *Credentials, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, "/chat.RChat/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rChatClient) Whoami(ctx context.Context, in *WhoamiRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/chat.RChat/Whoami", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rChatClient) Open(ctx context.Context, opts ...grpc.CallOption) (RChat_OpenClient, error) {
	stream, err := c.cc.NewStream(ctx, &RChat_ServiceDesc.Streams[0], "/chat.RChat/Open", opts...)
	if err != nil {
		return nil, err
	}
	x := &rChatOpenClient{stream}
	return x, nil
}

type RChat_OpenClient interface {
	Send(*Event) error
	Recv() (*Event, error)
	grpc.ClientStream
}

type rChatOpenClient struct {
	grpc.ClientStream
}

func (x *rChatOpenClient) Send(m *Event) error {
	return x.ClientStream.SendMsg(m)
}

func (x *rChatOpenClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rChatClient) FindSpaces(ctx context.Context, in *FindSpacesRequest, opts ...grpc.CallOption) (*FindSpacesResponse, error) {
	out := new(FindSpacesResponse)
	err := c.cc.Invoke(ctx, "/chat.RChat/FindSpaces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rChatClient) FindUsers(ctx context.Context, in *FindUsersRequest, opts ...grpc.CallOption) (*FindUsersResponse, error) {
	out := new(FindUsersResponse)
	err := c.cc.Invoke(ctx, "/chat.RChat/FindUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RChatServer is the server API for RChat service.
// All implementations must embed UnimplementedRChatServer
// for forward compatibility
type RChatServer interface {
	Signup(context.Context, *Credentials) (*AuthResponse, error)
	Login(context.Context, *Credentials) (*AuthResponse, error)
	Whoami(context.Context, *WhoamiRequest) (*User, error)
	Open(RChat_OpenServer) error
	FindSpaces(context.Context, *FindSpacesRequest) (*FindSpacesResponse, error)
	FindUsers(context.Context, *FindUsersRequest) (*FindUsersResponse, error)
	mustEmbedUnimplementedRChatServer()
}

// UnimplementedRChatServer must be embedded to have forward compatible implementations.
type UnimplementedRChatServer struct {
}

func (UnimplementedRChatServer) Signup(context.Context, *Credentials) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Signup not implemented")
}
func (UnimplementedRChatServer) Login(context.Context, *Credentials) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedRChatServer) Whoami(context.Context, *WhoamiRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Whoami not implemented")
}
func (UnimplementedRChatServer) Open(RChat_OpenServer) error {
	return status.Errorf(codes.Unimplemented, "method Open not implemented")
}
func (UnimplementedRChatServer) FindSpaces(context.Context, *FindSpacesRequest) (*FindSpacesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindSpaces not implemented")
}
func (UnimplementedRChatServer) FindUsers(context.Context, *FindUsersRequest) (*FindUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUsers not implemented")
}
func (UnimplementedRChatServer) mustEmbedUnimplementedRChatServer() {}

// UnsafeRChatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RChatServer will
// result in compilation errors.
type UnsafeRChatServer interface {
	mustEmbedUnimplementedRChatServer()
}

func RegisterRChatServer(s grpc.ServiceRegistrar, srv RChatServer) {
	s.RegisterService(&RChat_ServiceDesc, srv)
}

func _RChat_Signup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Credentials)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RChatServer).Signup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.RChat/Signup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RChatServer).Signup(ctx, req.(*Credentials))
	}
	return interceptor(ctx, in, info, handler)
}

func _RChat_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Credentials)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RChatServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.RChat/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RChatServer).Login(ctx, req.(*Credentials))
	}
	return interceptor(ctx, in, info, handler)
}

func _RChat_Whoami_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WhoamiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RChatServer).Whoami(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.RChat/Whoami",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RChatServer).Whoami(ctx, req.(*WhoamiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RChat_Open_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RChatServer).Open(&rChatOpenServer{stream})
}

type RChat_OpenServer interface {
	Send(*Event) error
	Recv() (*Event, error)
	grpc.ServerStream
}

type rChatOpenServer struct {
	grpc.ServerStream
}

func (x *rChatOpenServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

func (x *rChatOpenServer) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RChat_FindSpaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindSpacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RChatServer).FindSpaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.RChat/FindSpaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RChatServer).FindSpaces(ctx, req.(*FindSpacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RChat_FindUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RChatServer).FindUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.RChat/FindUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RChatServer).FindUsers(ctx, req.(*FindUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RChat_ServiceDesc is the grpc.ServiceDesc for RChat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RChat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat.RChat",
	HandlerType: (*RChatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Signup",
			Handler:    _RChat_Signup_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _RChat_Login_Handler,
		},
		{
			MethodName: "Whoami",
			Handler:    _RChat_Whoami_Handler,
		},
		{
			MethodName: "FindSpaces",
			Handler:    _RChat_FindSpaces_Handler,
		},
		{
			MethodName: "FindUsers",
			Handler:    _RChat_FindUsers_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Open",
			Handler:       _RChat_Open_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "chat/chat.proto",
}
